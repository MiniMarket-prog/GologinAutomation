"use strict";exports.id=3098,exports.ids=[3098],exports.modules={83098:(e,o,r)=>{r.d(o,{ED:()=>s,L6:()=>i,X2:()=>t,gologinAPI:()=>l});class t{constructor(e){this.baseUrl="https://api.gologin.com",this.successfulEndpoint=null,this.apiKey=e}getEndpoint(){return this.successfulEndpoint}async getProfiles(){try{console.log("[v0] Fetching profiles using page-based pagination");let e=[],o=1,r=!0,t=null;for(;r;){let l=[`${this.baseUrl}/browser/v2?page=${o}`,`${this.baseUrl}/browser/v2?skip=${(o-1)*30}&limit=30`,`${this.baseUrl}/browser?page=${o}`],s=[],i=!1;for(let e of l)try{console.log(`[v0] Trying: ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok)continue;let r=await o.json();if(void 0!==r.allProfilesCount?t=r.allProfilesCount:void 0!==r.total&&(t=r.total),Array.isArray(r)?s=r:r.profiles&&Array.isArray(r.profiles)?s=r.profiles:r.data&&Array.isArray(r.data)&&(s=r.data),s.length>0){console.log(`[v0] ✓ Success with ${e} - got ${s.length} profiles`),i=!0;break}}catch(e){continue}if(!i||0===s.length){console.log(`[v0] No more profiles found at page ${o}`),r=!1;break}1===o&&null!==t&&console.log(`[v0] Total profiles reported: ${t}`),1===o&&s.length>0&&console.log("[v0] Sample profile structure:",JSON.stringify(s[0],null,2));let a=new Set(e.map(e=>e.id)),n=s.filter(e=>!a.has(e.id));if(console.log(`[v0] Page ${o}: ${s.length} profiles, ${n.length} new (${s.length-n.length} duplicates)`),0===n.length){console.log(`[v0] All profiles on page ${o} are duplicates - stopping`),r=!1;break}e.push(...n),o++,null!==t&&e.length>=t&&(console.log(`[v0] Reached total count of ${t}`),r=!1),o>20&&(console.log("[v0] Reached page limit of 20"),r=!1)}return console.log(`[v0] ✓ Fetched ${e.length} unique profiles`),this.successfulEndpoint=`${this.baseUrl}/browser/v2`,e}catch(e){throw console.error("[v0] Failed to fetch profiles:",e.message),Error(`Failed to fetch profiles from GoLogin. ${e.message}. Please check your API key at https://app.gologin.com/personalArea/TokenApi`)}}async startProfile(e){console.log(`[v0] Starting profile ${e} in cloud mode...`);let o=await fetch(`${this.baseUrl}/browser/${e}/web`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to start profile: ${e}`)}let r=await o.json();return console.log("[v0] Start profile response:",JSON.stringify(r,null,2)),r}async stopProfile(e){let o=null;for(let r of[`/browser/${e}/stop`,`/browser/v2/${e}/stop`,`/browser/${e}/web/stop`])try{console.log(`[v0] Trying to stop profile at: ${r}`);let e=await fetch(`${this.baseUrl}${r}`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(e.ok)return console.log(`[v0] ✓ Profile stopped successfully using endpoint: ${r}`),e.json();if(404===e.status){console.log(`[v0] Profile might already be stopped (404 at ${r})`),o={status:404,message:"Profile not found or already stopped"};continue}let t=await e.text();o={status:e.status,message:t}}catch(e){console.log(`[v0] Error trying endpoint ${r}:`,e.message),o=e}if(o?.status===404)return console.log("[v0] Profile appears to be already stopped, continuing..."),{success:!0,message:"Profile already stopped"};throw Error(`Failed to stop profile after trying all endpoints: ${JSON.stringify(o)}`)}async getProfileStatus(e){let o=await fetch(`${this.baseUrl}/browser/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to get profile status: ${e}`)}return o.json()}async getFolders(){try{let e=`${this.baseUrl}/folders`;console.log(`[v0] Fetching folders from ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`GoLogin API error (${o.status}): ${e}`)}let r=await o.json(),t=Array.isArray(r)?r:r.folders||[];return console.log(`[v0] ✓ Fetched ${t.length} folders from GoLogin`),t}catch(e){return console.error("[v0] Failed to fetch folders:",e.message),[]}}async createProfile(e){try{let o;console.log(`[v0] Creating profile: ${e.name}`),e.folderId?console.log(`[v0] Assigning to folder ID: ${e.folderId}`):e.folderName?console.log(`[v0] Will search for folder: ${e.folderName}`):console.log("[v0] Creating in default folder");let r=["win","mac","lin"],t=r[Math.floor(Math.random()*r.length)],l=["1920x1080","1366x768","1440x900","1536x864","1600x900","2560x1440"],s=l[Math.floor(Math.random()*l.length)],i=["en-US","en-GB","es-ES","fr-FR","de-DE","pt-BR"],a=i[Math.floor(Math.random()*i.length)],n={name:e.name,browserType:"chrome",os:t,navigator:{userAgent:"random",resolution:s,language:a,platform:{win:"Win32",mac:"MacIntel",lin:"Linux x86_64"}[t]},proxy:{mode:"none"}};if(e.folderId){let r=(await this.getFolders()).find(o=>(o.id||o._id)===e.folderId);r?(o=r.name,console.log(`[v0] Found folder name "${o}" for ID: ${e.folderId}`),n.folderName=o,n.folder_name=o,n.folderId=e.folderId,n.folder_id=e.folderId,n.folder=e.folderId,n.folders=[o],console.log("[v0] Testing folder assignment with:"),console.log(`[v0]   - folderName: "${o}"`),console.log(`[v0]   - folder_name: "${o}"`),console.log(`[v0]   - folderId: "${e.folderId}"`),console.log(`[v0]   - folder_id: "${e.folderId}"`),console.log(`[v0]   - folder: "${e.folderId}"`),console.log(`[v0]   - folders: ["${o}"]`)):console.log(`[v0] ⚠ Could not find folder with ID: ${e.folderId}`)}else if(e.folderName){let r=(await this.getFolders()).find(o=>o.name===e.folderName);r?(o=r.name,n.folderId=r.id,n.folderName=o,console.log(`[v0] ✓ Found folder "${e.folderName}" with ID: ${r.id}`)):console.log(`[v0] ⚠ Folder "${e.folderName}" not found, creating profile in default folder`)}console.log("[v0] Creating profile with config:",JSON.stringify({name:n.name,os:n.os,resolution:n.navigator.resolution,language:n.navigator.language,folderId:n.folderId||"default",folder:n.folder,folders:n.folders},null,2));let d=await fetch(`${this.baseUrl}/browser`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(n)});if(!d.ok){let e=await d.text();throw console.error(`[v0] ❌ Profile creation failed with status ${d.status}:`,e),Error(`Failed to create profile: ${e}`)}let f=await d.json();return console.log(`[v0] ✓ Profile created with ID: ${f.id}`),console.log("[v0] Profile creation response:",JSON.stringify({id:f.id,name:f.name,folderId:f.folderId,folder:f.folder,folders:f.folders,status:f.status,os:f.os},null,2)),console.log("[v0] Waiting for profile to sync to GoLogin cloud..."),await this.waitForProfileSync(f.id)?(console.log(`[v0] ✓ Profile synced to cloud and ready to use`),console.log(`[v0] ✓ Profile should now be visible in your GoLogin account`),console.log(`[v0] ✓ Profile URL: https://app.gologin.com/profile/${f.id}`)):(console.warn(`[v0] ⚠ Profile created but sync verification timed out - profile may still be syncing`),console.warn(`[v0] ⚠ Check your GoLogin account in a few minutes: https://app.gologin.com`)),e.folderId&&!await this.moveProfileToFolder(f.id,e.folderId)&&console.warn(`[v0] ⚠ Could not move profile to folder after creation`),f}catch(e){throw console.error("[v0] Failed to create profile:",e.message),Error(`Failed to create profile in GoLogin: ${e.message}`)}}async createFolder(e){try{console.log(`[v0] Creating folder: ${e}`);let o=await fetch(`${this.baseUrl}/folders/folder`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({name:e})});if(!o.ok){let e=await o.text();throw Error(`Failed to create folder: ${e}`)}let r=await o.json();return console.log(`[v0] ✓ Folder created successfully:`,r.id),r}catch(e){throw console.error("[v0] Failed to create folder:",e.message),Error(`Failed to create folder in GoLogin: ${e.message}`)}}async moveProfileToFolder(e,o){try{for(let r of(console.log(`[v0] Moving profile ${e} to folder ${o}...`),[{method:"PATCH",url:`${this.baseUrl}/browser/${e}`,body:{folderId:o}},{method:"PATCH",url:`${this.baseUrl}/browser/${e}`,body:{folder:o}},{method:"PATCH",url:`${this.baseUrl}/browser/${e}`,body:{folders:[o]}},{method:"PUT",url:`${this.baseUrl}/browser/${e}`,body:{folderId:o}},{method:"POST",url:`${this.baseUrl}/browser/${e}/folder`,body:{folderId:o}}]))try{console.log(`[v0] Trying ${r.method} ${r.url} with body:`,JSON.stringify(r.body));let e=await fetch(r.url,{method:r.method,headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify(r.body)});if(e.ok){let o=await e.json();return console.log(`[v0] ✓ Profile moved to folder successfully using ${r.method} ${r.url}`),console.log("[v0] Response:",JSON.stringify(o,null,2)),!0}{let o=await e.text();console.log(`[v0] Failed with ${r.method} ${r.url}: ${e.status} - ${o}`)}}catch(e){console.log(`[v0] Error with ${r.method} ${r.url}:`,e.message)}return console.warn(`[v0] ⚠ Could not move profile to folder - tried all known endpoints`),!1}catch(e){return console.error("[v0] Failed to move profile to folder:",e.message),!1}}async waitForProfileSync(e,o=15){console.log(`[v0] Starting profile sync verification (max ${o} attempts, ~30 seconds)`);for(let r=1;r<=o;r++)try{console.log(`[v0] Sync check ${r}/${o}...`);let t=await fetch(`${this.baseUrl}/browser/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(t.ok){let o=await t.json();if(console.log(`[v0] Profile found - ID: ${o.id}, Name: ${o.name}, Status: ${o.status||"unknown"}`),o.folderId&&console.log(`[v0] Profile assigned to folder ID: ${o.folderId}`),o.id===e){if(!o.status||"ready"===o.status)return console.log(`[v0] ✓ Profile is synced and accessible in GoLogin cloud`),!0;console.log(`[v0] Profile found but status is "${o.status}", waiting for "ready" status...`)}}else console.log(`[v0] Profile not yet accessible (HTTP ${t.status})`);await new Promise(e=>setTimeout(e,2e3))}catch(e){console.log(`[v0] Sync check attempt ${r} error: ${e.message}`),await new Promise(e=>setTimeout(e,2e3))}return console.warn(`[v0] ⚠ Profile sync verification timed out after ${o} attempts`),console.warn(`[v0] ⚠ Profile was created but may need more time to appear in GoLogin app`),console.warn(`[v0] ⚠ Try refreshing the GoLogin app or waiting a few minutes`),!1}}let l=new t(process.env.GOLOGIN_API_KEY||"");async function s(e){return l.createProfile(e)}async function i(e){return l.createFolder(e)}}};