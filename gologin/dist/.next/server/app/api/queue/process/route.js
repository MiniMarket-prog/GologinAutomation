"use strict";(()=>{var e={};e.id=1220,e.ids=[1220],e.modules={85129:e=>{e.exports=require("gologin")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},77250:e=>{e.exports=import("puppeteer-core")},43052:(e,o,t)=>{t.a(e,async(e,s)=>{try{t.r(o),t.d(o,{originalPathname:()=>m,patchFetch:()=>c,requestAsyncStorage:()=>u,routeModule:()=>g,serverHooks:()=>p,staticGenerationAsyncStorage:()=>d});var a=t(49303),r=t(88716),i=t(60670),l=t(51212),n=e([l]);l=(n.then?(await n)():n)[0];let g=new a.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/queue/process/route",pathname:"/api/queue/process",filename:"route",bundlePath:"app/api/queue/process/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\queue\\process\\route.ts",nextConfigOutput:"standalone",userland:l}),{requestAsyncStorage:u,staticGenerationAsyncStorage:d,serverHooks:p}=g,m="/api/queue/process/route";function c(){return(0,i.patchFetch)({serverHooks:p,staticGenerationAsyncStorage:d})}s()}catch(e){s(e)}})},51212:(e,o,t)=>{t.a(e,async(e,s)=>{try{t.r(o),t.d(o,{POST:()=>c});var a=t(19692),r=t(33870),i=t(35018),l=t(87070),n=e([r]);async function c(e){try{let e=await (0,a.t)(),{data:o,error:t}=await e.from("settings").select("value").eq("key","gologin_api_key").single();if(t||!o?.value)return l.NextResponse.json({error:"GoLogin API key not found. Please save it in Settings first."},{status:400});let s=new r.w(o.value);(0,i.th)(s);try{await s.processPendingTasks()}finally{(0,i.th)(null)}return l.NextResponse.json({success:!0,message:"Queue processed"})}catch(e){return console.error("[v0] Error processing queue:",e),(0,i.th)(null),l.NextResponse.json({error:e.message},{status:500})}}r=(n.then?(await n)():n)[0],s()}catch(e){s(e)}})},35018:(e,o,t)=>{t.d(o,{ON:()=>r,th:()=>a});let s=null;function a(e){s=e}function r(){return!!s&&(s.requestStop(),!0)}},33870:(e,o,t)=>{t.a(e,async(e,s)=>{try{t.d(o,{w:()=>c});var a=t(19692),r=t(99064),i=t(61978),l=t(97957),n=e([i]);i=(n.then?(await n)():n)[0];class c{constructor(e){this.isProcessing=!1,this.gologinApiKey=e}async processPendingTasks(){if(this.isProcessing){console.log("[v0] Queue already processing, skipping");return}this.isProcessing=!0,console.log("[v0] ========================================"),console.log("[v0] Starting task queue processing"),console.log("[v0] ========================================");try{let e=(0,r.S)(),o=await (0,a.t)();console.log("[v0] Fetching pending tasks..."),console.log("[v0] [DEBUG] Current time:",new Date().toISOString());let{data:t,error:s}=await e.from("automation_tasks").select("id, task_type, status, scheduled_at, profile_id").eq("status","pending");console.log("[v0] [DEBUG] All pending tasks in database:",t?.length||0),t&&t.length>0&&t.forEach(e=>{console.log(`[v0] [DEBUG]   - Task ${e.id}: ${e.task_type}, scheduled_at: ${e.scheduled_at||"NULL"}`)});let{data:i,error:n}=await e.from("automation_tasks").select("*").eq("status","pending").or(`scheduled_at.is.null,scheduled_at.lte.${new Date().toISOString()}`).order("priority",{ascending:!1}).order("scheduled_at",{ascending:!0,nullsFirst:!0}).limit(10);if(n)throw console.error("[v0] ❌ Error fetching tasks:",n),n;if(console.log("[v0] [DEBUG] Tasks ready to process:",i?.length||0),!i||0===i.length){console.log("[v0] No pending tasks to process");return}console.log(`[v0] ✓ Found ${i.length} pending tasks`),i.forEach((e,o)=>{console.log(`[v0]   ${o+1}. ${e.task_type} (ID: ${e.id})`)}),console.log("[v0] Fetching behavior pattern...");let{data:c,error:g}=await o.from("behavior_patterns").select("*").eq("is_default",!0).single();if(g)throw console.error("[v0] ❌ Error fetching behavior pattern:",g),g;console.log("[v0] ✓ Behavior pattern loaded"),console.log("[v0] Fetching GoLogin mode setting...");let{data:u}=await o.from("settings").select("value").eq("key","gologin_mode").single(),d=u?.value||"cloud",p=(0,l.B)(d);for(let e of(console.log(`[v0] ✓ GoLogin mode: ${p}`),i))await this.processTask(e,c,p);console.log("[v0] ========================================"),console.log("[v0] ✓ Task queue processing completed"),console.log("[v0] ========================================")}catch(e){console.error("[v0] ========================================"),console.error("[v0] ❌ Error processing task queue"),console.error("[v0] Error:",e.message),console.error("[v0] ========================================")}finally{this.isProcessing=!1}}async processTask(e,o,t){console.log("[v0] ========================================"),console.log(`[v0] Processing task ${e.id}`),console.log(`[v0] Task type: ${e.task_type}`),console.log("[v0] ========================================");try{let s=await (0,a.t)();if(!e.profile_id){console.log(`[v0] ⚠️ Task ${e.id} has no profile_id, marking as failed`),await s.from("automation_tasks").update({status:"failed",completed_at:new Date().toISOString(),error_message:"Task cannot be processed without a profile"}).eq("id",e.id),console.log(`[v0] ✓ Task marked as failed`);return}console.log(`[v0] Fetching profile ${e.profile_id}...`);let{data:l,error:n}=await s.from("gologin_profiles").select("*").eq("id",e.profile_id).single();if(n)throw console.error("[v0] ❌ Error fetching profile:",n),n;if(console.log(`[v0] ✓ Profile loaded: ${l.profile_name}`),"running"===l.status){console.log(`[v0] ⚠️ Profile ${l.profile_name} is already running, skipping task`);return}console.log("[v0] Updating task status to 'running'..."),await s.from("automation_tasks").update({status:"running",started_at:new Date().toISOString()}).eq("id",e.id),console.log("[v0] ✓ Task status updated"),console.log("[v0] Updating profile status to 'running'..."),await s.from("gologin_profiles").update({status:"running"}).eq("id",l.id),console.log("[v0] ✓ Profile status updated"),console.log("[v0] [DEBUG] Task type:",e.task_type),console.log("[v0] [DEBUG] Profile gmail_email:",l.gmail_email),console.log("[v0] [DEBUG] Profile gmail_password:",l.gmail_password?"***SET***":"NOT SET"),console.log("[v0] [DEBUG] Original task config:",JSON.stringify(e.config));let c={...e};"check_gmail_status"===e.task_type&&l.gmail_email&&l.gmail_password?(console.log("[v0] ✓ Adding Gmail credentials to task config for auto-login..."),c.config={...e.config,email:l.gmail_email,password:l.gmail_password},console.log("[v0] [DEBUG] Updated task config:",JSON.stringify({...c.config,password:"***HIDDEN***"}))):(console.log("[v0] ⚠️ NOT adding credentials - conditions not met"),console.log("[v0] [DEBUG] Condition check:",{isCheckGmailStatus:"check_gmail_status"===e.task_type,hasEmail:!!l.gmail_email,hasPassword:!!l.gmail_password})),console.log("[v0] Executing task...");let g=new i.Z(this.gologinApiKey,t,o.config),u=await g.executeTask(c,l);if(console.log("[v0] Task execution result:",{success:u.success,duration:u.duration,error:u.error||"none"}),console.log("[v0] [DEBUG] Checking if task is check_gmail_status or setup_gmail..."),console.log("[v0] [DEBUG] Task type:",e.task_type),console.log("[v0] [DEBUG] Result object:",JSON.stringify(u,null,2)),("check_gmail_status"===e.task_type||"setup_gmail"===e.task_type)&&u.result){console.log("[v0] [DEBUG] Gmail status check detected, preparing profile update..."),console.log("[v0] [DEBUG] Result.result:",JSON.stringify(u.result,null,2));let e=u.result.status,o=u.result.message;console.log("[v0] [DEBUG] Updating profile with Gmail status:",{gmail_status:e,gmail_status_checked_at:new Date().toISOString(),gmail_status_message:o});let t=(0,r.S)(),{data:s,error:a}=await t.from("gologin_profiles").update({gmail_status:e,gmail_status_checked_at:new Date().toISOString(),gmail_status_message:o}).eq("id",l.id).select();a?console.error("[v0] [DEBUG] ❌ Error updating Gmail status:",a):console.log("[v0] [DEBUG] ✓ Gmail status updated successfully:",s)}else console.log("[v0] [DEBUG] Not a Gmail status check or setup task or no result data");console.log("[v0] Updating task final status..."),await s.from("automation_tasks").update({status:u.success?"completed":"failed",completed_at:new Date().toISOString(),error_message:u.error||null}).eq("id",e.id),console.log(`[v0] ✓ Task marked as ${u.success?"completed":"failed"}`),console.log("[v0] Updating profile final status..."),await s.from("gologin_profiles").update({status:u.success?"idle":"error",last_run:new Date().toISOString()}).eq("id",l.id),console.log(`[v0] ✓ Profile status updated to ${u.success?"idle":"error"}`),console.log("[v0] Creating activity log..."),await s.from("activity_logs").insert({profile_id:l.id,task_id:e.id,action:e.task_type,details:u.result||{},duration_ms:u.duration,success:u.success}),console.log("[v0] ✓ Activity logged"),console.log("[v0] ========================================"),console.log(`[v0] ${u.success?"✓✓✓":"❌"} Task ${e.id} ${u.success?"completed successfully":"failed"}`),!u.success&&u.error&&console.log(`[v0] Error: ${u.error}`),console.log("[v0] ========================================")}catch(t){console.error("[v0] ========================================"),console.error(`[v0] ❌ Error processing task ${e.id}`),console.error(`[v0] Error type: ${t.name}`),console.error(`[v0] Error message: ${t.message}`),console.error("[v0] Error stack:",t.stack),console.error("[v0] ========================================");let o=await (0,a.t)();await o.from("automation_tasks").update({status:"failed",completed_at:new Date().toISOString(),error_message:t.message}).eq("id",e.id),await o.from("gologin_profiles").update({status:"error"}).eq("id",e.profile_id)}}async scheduleRecurringTask(e,o,t,s){let r=await (0,a.t)(),{data:i}=await r.auth.getUser();if(!i.user)throw Error("Unauthorized");let{data:l,error:n}=await r.from("automation_tasks").insert({profile_id:e,task_type:o,config:s||{},scheduled_at:new Date().toISOString(),created_by:i.user.id}).select().single();if(n)throw n;return l}}s()}catch(e){s(e)}})}};var o=require("../../../../webpack-runtime.js");o.C(e);var t=e=>o(o.s=e),s=o.X(0,[8948,4526,9702,5972,3098,7403],()=>t(43052));module.exports=s})();