"use strict";(()=>{var e={};e.id=3495,e.ids=[3495],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},86005:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>_,patchFetch:()=>h,requestAsyncStorage:()=>p,routeModule:()=>g,serverHooks:()=>f,staticGenerationAsyncStorage:()=>m});var o={};s.r(o),s.d(o,{GET:()=>d,POST:()=>c});var r=s(49303),a=s(88716),i=s(60670),n=s(19692),l=s(87070),u=s(46569);async function d(e){try{let t=await (0,n.t)(),{searchParams:s}=new URL(e.url),{data:{user:o}}=await t.auth.getUser();if(!o)return l.NextResponse.json({error:"Unauthorized"},{status:401});let r=await (0,u.GJ)();console.log(`[v0] User ${o.email} is admin: ${r}`);let a=s.get("status"),i=s.get("profile_id"),d=s.get("search"),c=Number.parseInt(s.get("limit")||"100");console.log(`[v0] Query params - status: ${a}, profileId: ${i}, search: ${d}, limit: ${c}`);let g=[];if(!r){let{data:e}=await t.from("users").select("id").eq("email",o.email).single();if(!e)return console.log("[v0] User not found in database, returning empty tasks"),l.NextResponse.json({tasks:[],isAdmin:!1});let{data:s}=await t.from("user_folder_assignments").select("folder_name").eq("user_id",e.id);if(g=s?.map(e=>e.folder_name)||[],console.log(`[v0] User has access to ${g.length} folders:`,g),0===g.length)return console.log("[v0] User has no folder assignments, returning empty tasks"),l.NextResponse.json({tasks:[],isAdmin:!1})}if(a){let{count:e}=await t.from("automation_tasks").select("*",{count:"exact",head:!0}).eq("status",a);console.log(`[v0] Total tasks in database with status '${a}': ${e}`)}let p=t.from("automation_tasks").select(`
        *,
        gologin_profiles (
          profile_name,
          folder_name,
          gmail_status,
          gmail_status_checked_at,
          gmail_status_message,
          assigned_user_id,
          users!gologin_profiles_assigned_user_id_fkey (
            email
          )
        )
      `).order("created_at",{ascending:!1}).limit(c);!r&&g.length>0?(console.log(`[v0] Applying folder filter for non-admin user: ${g.join(", ")}`),p=p.or(`profile_id.is.null,gologin_profiles.folder_name.in.(${g.join(",")})`)):r&&console.log("[v0] Admin user - no folder filter applied"),a&&(console.log(`[v0] Applying status filter: ${a}`),p=p.eq("status",a)),i&&(console.log(`[v0] Applying profile filter: ${i}`),p=p.eq("profile_id",i));let{data:m,error:f}=await p;if(f)throw console.error("[v0] Database query error:",f),f;console.log(`[v0] Query returned ${m?.length||0} tasks from database`),m&&m.length>0&&console.log("[v0] Sample task data:",{id:m[0].id,status:m[0].status,task_type:m[0].task_type,profile_name:m[0].gologin_profiles?.profile_name,folder_name:m[0].gologin_profiles?.folder_name});let _=m?.map(e=>({...e,profile_name:e.gologin_profiles?.profile_name||"Unknown Profile",folder_name:e.gologin_profiles?.folder_name||null,gmail_status:e.gologin_profiles?.gmail_status||null,gmail_status_checked_at:e.gologin_profiles?.gmail_status_checked_at||null,gmail_status_message:e.gologin_profiles?.gmail_status_message||null,user_email:e.gologin_profiles?.users?.email||null,assigned_user_id:e.gologin_profiles?.assigned_user_id||null}));if(d&&_){let e=d.toLowerCase(),t=_.length;_=_.filter(t=>{let s=t.profile_name?.toLowerCase().includes(e),o=t.folder_name?.toLowerCase().includes(e),a=r&&t.user_email?.toLowerCase().includes(e);return s||o||a}),console.log(`[v0] Search filter reduced tasks from ${t} to ${_.length}`)}return console.log(`[v0] Returning ${_?.length||0} tasks for user`),l.NextResponse.json({tasks:_,isAdmin:r})}catch(e){return console.error("[v0] Error fetching tasks:",e),l.NextResponse.json({error:e.message},{status:500})}}async function c(e){try{let t=await e.json(),s=await (0,u.ts)();if(!s)return l.NextResponse.json({error:"Unauthorized"},{status:401});let o=await (0,n.t)(),{data:r}=await o.from("users").select("id").eq("email",s.email).single();if(!r)return l.NextResponse.json({error:`User not found: ${s.email}`},{status:404});let{data:a,error:i}=await o.from("gologin_profiles").select("id").eq("profile_id",t.profile_id).single();if(i||!a)return console.log("[v0] Profile lookup error:",i),l.NextResponse.json({error:`Profile not found in database: ${t.profile_id}`},{status:404});let d={profile_id:a.id,task_type:t.task_type,config:t.config||{},priority:t.priority||0,scheduled_at:t.scheduled_at||new Date().toISOString(),created_by:r.id,status:t.status||"pending"};console.log("[v0] Creating task with data:",d);let{data:c,error:g}=await o.from("automation_tasks").insert(d).select().single();if(g)throw console.error("[v0] Database error creating task:",g),g;return console.log("[v0] Task created successfully:",c),l.NextResponse.json(c)}catch(e){return console.error("[v0] Error creating task:",e),l.NextResponse.json({error:e.message},{status:500})}}let g=new r.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/tasks/route",pathname:"/api/tasks",filename:"route",bundlePath:"app/api/tasks/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\tasks\\route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:f}=g,_="/api/tasks/route";function h(){return(0,i.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:m})}},19692:(e,t,s)=>{s.d(t,{t:()=>a});var o=s(67721),r=s(71615);async function a(){let e=await (0,r.cookies)();return(0,o.createServerClient)("https://umhdnhckxgqywxgpybgo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtaGRuaGNreGdxeXd4Z3B5YmdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDA1NzYsImV4cCI6MjA3NDk3NjU3Nn0.sodO3ZUaTWDxBBZitsrc_j3SUmVWBNlAsQoDAdzs8mI",{cookies:{getAll:()=>e.getAll(),setAll(t){try{t.forEach(({name:t,value:s,options:o})=>e.set(t,s,o))}catch{}}}})}},46569:(e,t,s)=>{s.d(t,{GJ:()=>a,kF:()=>i,ts:()=>r});var o=s(19692);async function r(){let e=await (0,o.t)(),{data:{user:t}}=await e.auth.getUser();return t}async function a(){let e=await (0,o.t)(),t=await r();if(!t)return!1;console.log("[v0] Checking admin status for user:",t.email);let{data:s,error:a}=await e.from("users").select("role").eq("email",t.email).single();if(console.log("[v0] User data from database:",s),console.log("[v0] Query error:",a),a||!s)return console.log("[v0] No user data found or error occurred"),!1;let i="admin"===s.role;return console.log("[v0] Is admin:",i),i}async function i(){if(!await a())throw Error("Unauthorized: Admin access required")}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),o=t.X(0,[8948,4526,9702,5972],()=>s(86005));module.exports=o})();