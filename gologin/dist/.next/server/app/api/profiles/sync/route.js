"use strict";(()=>{var e={};e.id=9776,e.ids=[9776],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},95457:(e,o,r)=>{r.r(o),r.d(o,{originalPathname:()=>v,patchFetch:()=>_,requestAsyncStorage:()=>p,routeModule:()=>f,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{POST:()=>g});var t=r(49303),l=r(88716),i=r(60670),n=r(87070),a=r(19692),d=r(99064),c=r(46569),u=r(83098);async function g(){try{let e=await (0,a.t)(),{data:{user:o}}=await e.auth.getUser();if(!o)return n.NextResponse.json({error:"Unauthorized"},{status:401});let r=await (0,c.GJ)();if(console.log(`[v0] User ${o.email} is admin: ${r}`),!r)return n.NextResponse.json({error:"Unauthorized: Only administrators can sync profiles from GoLogin"},{status:403});let s=(0,d.S)();console.log(`[v0] Ensuring user record exists for ${o.email}`);let t=o.id,{data:l}=await s.from("users").select("id").eq("id",o.id).single();if(l)console.log("[v0] User record already exists");else{console.log("[v0] User not found by ID, attempting to create...");let{error:e}=await s.from("users").insert({id:o.id,email:o.email,role:r?"admin":"user"});if(e){if("23505"===e.code&&e.message.includes("email")){console.log("[v0] User exists with same email, fetching existing user...");let{data:e}=await s.from("users").select("id").eq("email",o.email||"").single();if(e)t=e.id,console.log(`[v0] Using existing user ID: ${t}`);else throw Error("Failed to find or create user record")}else throw console.error("[v0] Error creating user record:",e),Error(`Failed to create user record: ${e.message}`)}else console.log("[v0] User record created successfully")}console.log("[v0] Fetching profiles from GoLogin API...");let i=await u.gologinAPI.getProfiles();console.log(`[v0] Found ${i.length} profiles from GoLogin`),console.log("[v0] Fetching folders from GoLogin API...");let g=await u.gologinAPI.getFolders();console.log(`[v0] Found ${g.length} folders from GoLogin`);let f=new Map(g.map(e=>[e.id||e._id,e.name||"Uncategorized"]));console.log("[v0] Folder map:",Object.fromEntries(f));let p=i.map(e=>{let o=e.folders&&e.folders.length>0?e.folders[0]:"Uncategorized";return{profile_id:e.id,profile_name:e.name||`Profile ${e.id}`,folder_name:o,assigned_user_id:null,status:"idle",is_deleted:!1,deleted_at:null}});console.log(`[v0] Mapped ${p.length} profiles with folder names`);let m=p.reduce((e,o)=>{let r=o.folder_name;return e[r]=(e[r]||0)+1,e},{});console.log("[v0] Folder distribution:",m);let h=Array.from(new Map(p.map(e=>[e.profile_id,e])).values());if(console.log(`[v0] Deduplicating: ${p.length} â†’ ${h.length} unique profiles`),0===h.length)return n.NextResponse.json({success:!0,message:"No profiles to sync",count:0});console.log(`[v0] Using ${r?"admin":"regular"} client for sync`);let{data:v,error:_}=await s.from("gologin_profiles").upsert(h,{onConflict:"profile_id",ignoreDuplicates:!1}).select();if(_)throw console.error("[v0] Error upserting profiles:",_),Error(`Failed to sync profiles: ${_.message}`);console.log(`[v0] Successfully synced ${v?.length||h.length} profiles`),console.log("[v0] Updating profile assignments based on folder assignments...");let{data:y}=await s.from("user_folder_assignments").select("user_id, folder_name"),x=y||[];if(x.length>0){console.log(`[v0] Found ${x.length} folder assignments`);let e=new Map;for(let o of x)e.set(o.folder_name,o.user_id);for(let[o,r]of(console.log("[v0] Folder to user map:",Object.fromEntries(e)),Array.from(e.entries()))){let{data:e,error:t}=await s.from("gologin_profiles").update({assigned_user_id:r}).eq("folder_name",o).select("profile_id, profile_name");t?console.error(`[v0] Error updating profiles for folder ${o}:`,t):console.log(`[v0] Assigned ${e?.length||0} profiles in folder "${o}" to user ${r}`)}}else console.log("[v0] No folder assignments found - profiles will not be assigned to users");let w=i.map(e=>e.id);console.log(`[v0] Checking for deleted profiles not in GoLogin list of ${w.length} IDs`);let{data:E}=await s.from("gologin_profiles").select("profile_id, profile_name").eq("is_deleted",!1),I=(E||[]).filter(e=>!w.includes(e.profile_id)),A=0;if(I.length>0){let e=I.map(e=>e.profile_id),{data:o,error:r}=await s.from("gologin_profiles").update({is_deleted:!0,deleted_at:new Date().toISOString(),status:"deleted"}).in("profile_id",e).select("profile_id, profile_name");r?console.error("[v0] Error marking deleted profiles:",r):(A=o?.length||0,console.log(`[v0] Marked ${A} profiles as deleted`),o&&o.length>0&&console.log("[v0] Deleted profiles:",o.map(e=>`${e.profile_name} (${e.profile_id})`).join(", ")))}else console.log("[v0] No deleted profiles found");return n.NextResponse.json({success:!0,message:`Successfully synced ${v?.length||h.length} profiles, marked ${A} as deleted`,synced:v?.length||h.length,deleted:A})}catch(o){console.error("[v0] Error syncing profiles:",o);let e=o instanceof Error?o.message:"Failed to sync profiles";return n.NextResponse.json({error:e},{status:500})}}let f=new t.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/profiles/sync/route",pathname:"/api/profiles/sync",filename:"route",bundlePath:"app/api/profiles/sync/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\profiles\\sync\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:h}=f,v="/api/profiles/sync/route";function _(){return(0,i.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},99064:(e,o,r)=>{r.d(o,{S:()=>l});var s=r(61657);let t=null;function l(){if(t)return t;if(!process.env.SUPABASE_SERVICE_ROLE_KEY)throw Error("SUPABASE_SERVICE_ROLE_KEY is not set");return t=(0,s.eI)("https://umhdnhckxgqywxgpybgo.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY,{auth:{autoRefreshToken:!1,persistSession:!1}})}},19692:(e,o,r)=>{r.d(o,{t:()=>l});var s=r(67721),t=r(71615);async function l(){let e=await (0,t.cookies)();return(0,s.createServerClient)("https://umhdnhckxgqywxgpybgo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtaGRuaGNreGdxeXd4Z3B5YmdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDA1NzYsImV4cCI6MjA3NDk3NjU3Nn0.sodO3ZUaTWDxBBZitsrc_j3SUmVWBNlAsQoDAdzs8mI",{cookies:{getAll:()=>e.getAll(),setAll(o){try{o.forEach(({name:o,value:r,options:s})=>e.set(o,r,s))}catch{}}}})}},46569:(e,o,r)=>{r.d(o,{GJ:()=>l,kF:()=>i,ts:()=>t});var s=r(19692);async function t(){let e=await (0,s.t)(),{data:{user:o}}=await e.auth.getUser();return o}async function l(){let e=await (0,s.t)(),o=await t();if(!o)return!1;console.log("[v0] Checking admin status for user:",o.email);let{data:r,error:l}=await e.from("users").select("role").eq("email",o.email).single();if(console.log("[v0] User data from database:",r),console.log("[v0] Query error:",l),l||!r)return console.log("[v0] No user data found or error occurred"),!1;let i="admin"===r.role;return console.log("[v0] Is admin:",i),i}async function i(){if(!await l())throw Error("Unauthorized: Admin access required")}}};var o=require("../../../../webpack-runtime.js");o.C(e);var r=e=>o(o.s=e),s=o.X(0,[8948,4526,9702,5972,3098],()=>r(95457));module.exports=s})();