"use strict";(()=>{var e={};e.id=691,e.ids=[691],e.modules={85129:e=>{e.exports=require("gologin")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},77250:e=>{e.exports=import("puppeteer-core")},8110:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{originalPathname:()=>m,patchFetch:()=>u,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>d,staticGenerationAsyncStorage:()=>g});var o=s(49303),a=s(88716),i=s(60670),n=s(70930),l=e([n]);n=(l.then?(await l)():l)[0];let c=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/tasks/execute/route",pathname:"/api/tasks/execute",filename:"route",bundlePath:"app/api/tasks/execute/route"},resolvedPagePath:"D:\\appProject\\GologinAutomation\\gologin\\app\\api\\tasks\\execute\\route.ts",nextConfigOutput:"standalone",userland:n}),{requestAsyncStorage:p,staticGenerationAsyncStorage:g,serverHooks:d}=c,m="/api/tasks/execute/route";function u(){return(0,i.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:g})}r()}catch(e){r(e)}})},70930:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{POST:()=>c});var o=s(19692),a=s(99064),i=s(61978),n=s(87070),l=s(97957),u=e([i]);async function c(e){try{let t=await (0,o.t)(),{task_id:s}=await e.json();if(!s)return n.NextResponse.json({error:"Task ID is required"},{status:400});let[r,u]=await Promise.all([t.from("settings").select("value").eq("key","gologin_api_key").single(),t.from("settings").select("value").eq("key","gologin_mode").single()]);if(r.error||!r.data?.value)return n.NextResponse.json({error:"GoLogin API key not found. Please save it in Settings first."},{status:400});let c=r.data.value,p=u.data?.value||"cloud",g=(0,l.B)(p),{data:d,error:m}=await t.from("automation_tasks").select("*").eq("id",s).single();if(m)throw m;let{data:f,error:x}=await t.from("gologin_profiles").select("*").eq("id",d.profile_id);if(x)throw Error(`Database error fetching profile: ${x.message}`);if(!f||0===f.length)throw Error(`Profile ${d.profile_id} not found. It may have been deleted or you don't have access to it.`);if(f.length>1)throw Error("Data integrity error: Multiple profiles found with the same ID");let h=f[0],{data:_,error:v}=await t.from("behavior_patterns").select("*").eq("is_default",!0).single();if(v)throw v;await t.from("automation_tasks").update({status:"running",started_at:new Date().toISOString()}).eq("id",s),await t.from("gologin_profiles").update({status:"running"}).eq("id",h.id);let y=new i.Z(c,g,_.config),k=await y.executeTask(d,h);await t.from("automation_tasks").update({status:k.success?"completed":"failed",completed_at:new Date().toISOString(),error_message:k.error||null}).eq("id",s);let w={status:"idle",last_run:new Date().toISOString()};console.log("[v0] Task type:",d.task_type),console.log("[v0] Task result:",JSON.stringify(k,null,2)),"check_gmail_status"===d.task_type&&k.result?(console.log("[v0] ✓ Gmail status check detected"),console.log("[v0] Result data:",JSON.stringify(k.result,null,2)),w.gmail_status=k.result.status,w.gmail_status_checked_at=new Date().toISOString(),w.gmail_status_message=k.result.message,console.log("[v0] Profile updates to apply:",JSON.stringify(w,null,2))):(console.log("[v0] Gmail status check NOT detected"),console.log("[v0] Condition check - task_type match:","check_gmail_status"===d.task_type),console.log("[v0] Condition check - result.result exists:",!!k.result)),console.log("[v0] Updating profile with:",JSON.stringify(w,null,2));let q=await t.from("gologin_profiles").update(w).eq("id",h.id);console.log("[v0] Profile update result:",JSON.stringify(q,null,2)),console.log("[v0] Creating activity log...");let S=(0,a.S)(),{error:P}=await S.from("activity_logs").insert({profile_id:h.id,task_id:s,action:d.task_type,details:k.result||{},duration_ms:k.duration,success:k.success});return P?console.error("[v0] ❌ Error creating activity log:",P):console.log("[v0] ✓ Activity log created successfully"),n.NextResponse.json({success:k.success,result:k})}catch(e){return console.error("[v0] Error executing task:",e),n.NextResponse.json({error:e.message},{status:500})}}i=(u.then?(await u)():u)[0],r()}catch(e){r(e)}})}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[8948,4526,9702,5972,7403],()=>s(8110));module.exports=r})();