"use strict";(()=>{var e={};e.id=776,e.ids=[776],e.modules={2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2615:e=>{e.exports=require("http")},8791:e=>{e.exports=require("https")},8621:e=>{e.exports=require("punycode")},6162:e=>{e.exports=require("stream")},7360:e=>{e.exports=require("url")},1568:e=>{e.exports=require("zlib")},5457:(e,o,t)=>{t.r(o),t.d(o,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>f,routeModule:()=>u,serverHooks:()=>d,staticGenerationAsyncStorage:()=>g});var r={};t.r(r),t.d(r,{POST:()=>c});var s=t(9303),l=t(8716),i=t(670),a=t(9692),n=t(3098),p=t(7070);async function c(e){try{let e=await (0,a.t)(),{data:o,error:t}=await e.from("settings").select("value").eq("key","gologin_api_key").single();if(t||!o?.value)return p.NextResponse.json({error:"GoLogin API key not found. Please save it in Settings first."},{status:400});let r=o.value,{data:s}=await e.auth.getUser();if(!s.user)return p.NextResponse.json({error:"Unauthorized"},{status:401});let l=new n.X(r),[i,c]=await Promise.all([l.getProfiles(),l.getFolders()]);if(console.log(`[v0] Found ${i.length} profiles from GoLogin`),0===i.length)return p.NextResponse.json({success:!0,message:"No profiles found in your GoLogin account",added:0,updated:0,total:0});let u=new Map(c.map(e=>[e.id,e.name||"Unnamed Folder"]));console.log(`[v0] 📁 Folder Map:`,Array.from(u.entries())),console.log(`[v0] 📋 Sample profile folders:`,i.slice(0,3).map(e=>({id:e.id,name:e.name,folders:e.folders})));let f=i.map(e=>{let o=e.folders&&e.folders.length>0?e.folders[0]:"No Folder";return e.folders&&e.folders.length>0&&console.log(`[v0] Profile "${e.name}" has folders:`,e.folders,`→ using: "${o}"`),{profile_id:e.id,profile_name:e.name||`Profile ${e.id}`,folder_name:o}}),g=Array.from(new Map(f.map(e=>[e.profile_id,e])).values());console.log(`[v0] Deduplicating: ${f.length} profiles → ${g.length} unique profiles`);let{data:d,error:h}=await e.from("gologin_profiles").upsert(g,{onConflict:"profile_id",ignoreDuplicates:!1}).select();if(h)return console.error("[v0] Error syncing profiles:",h),p.NextResponse.json({error:`Failed to sync profiles: ${h.message}`},{status:500});let y=d?.length||0;return console.log(`[v0] Successfully synced ${y} profiles`),p.NextResponse.json({success:!0,message:`Successfully synced ${y} profiles from GoLogin`,synced:y,total:i.length})}catch(e){return console.error("[v0] Error syncing profiles:",e),p.NextResponse.json({error:e.message},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/profiles/sync/route",pathname:"/api/profiles/sync",filename:"route",bundlePath:"app/api/profiles/sync/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\profiles\\sync\\route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:f,staticGenerationAsyncStorage:g,serverHooks:d}=u,h="/api/profiles/sync/route";function y(){return(0,i.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:g})}},3098:(e,o,t)=>{t.d(o,{U:()=>s,X:()=>r});class r{constructor(e){this.baseUrl="https://api.gologin.com",this.successfulEndpoint=null,this.apiKey=e}getEndpoint(){return this.successfulEndpoint}async getProfiles(){try{console.log("[v0] Fetching profiles using page-based pagination");let e=[],o=1,t=!0,r=null;for(;t;){let s=[`${this.baseUrl}/browser/v2?page=${o}`,`${this.baseUrl}/browser/v2?skip=${(o-1)*30}&limit=30`,`${this.baseUrl}/browser?page=${o}`],l=[],i=!1;for(let e of s)try{console.log(`[v0] Trying: ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok)continue;let t=await o.json();if(void 0!==t.allProfilesCount?r=t.allProfilesCount:void 0!==t.total&&(r=t.total),Array.isArray(t)?l=t:t.profiles&&Array.isArray(t.profiles)?l=t.profiles:t.data&&Array.isArray(t.data)&&(l=t.data),l.length>0){console.log(`[v0] ✓ Success with ${e} - got ${l.length} profiles`),i=!0;break}}catch(e){continue}if(!i||0===l.length){console.log(`[v0] No more profiles found at page ${o}`),t=!1;break}1===o&&null!==r&&console.log(`[v0] Total profiles reported: ${r}`),1===o&&l.length>0&&console.log("[v0] Sample profile structure:",JSON.stringify(l[0],null,2));let a=new Set(e.map(e=>e.id)),n=l.filter(e=>!a.has(e.id));if(console.log(`[v0] Page ${o}: ${l.length} profiles, ${n.length} new (${l.length-n.length} duplicates)`),0===n.length){console.log(`[v0] All profiles on page ${o} are duplicates - stopping`),t=!1;break}e.push(...n),o++,null!==r&&e.length>=r&&(console.log(`[v0] Reached total count of ${r}`),t=!1),o>20&&(console.log("[v0] Reached page limit of 20"),t=!1)}return console.log(`[v0] ✓ Fetched ${e.length} unique profiles`),this.successfulEndpoint=`${this.baseUrl}/browser/v2`,e}catch(e){throw console.error("[v0] Failed to fetch profiles:",e.message),Error(`Failed to fetch profiles from GoLogin. ${e.message}. Please check your API key at https://app.gologin.com/personalArea/TokenApi`)}}async startProfile(e){console.log(`[v0] Starting profile ${e} in cloud mode...`);let o=await fetch(`${this.baseUrl}/browser/${e}/web`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to start profile: ${e}`)}let t=await o.json();return console.log("[v0] Start profile response:",JSON.stringify(t,null,2)),t}async stopProfile(e){let o=null;for(let t of[`/browser/${e}/stop`,`/browser/v2/${e}/stop`,`/browser/${e}/web/stop`])try{console.log(`[v0] Trying to stop profile at: ${t}`);let e=await fetch(`${this.baseUrl}${t}`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(e.ok)return console.log(`[v0] ✓ Profile stopped successfully using endpoint: ${t}`),e.json();if(404===e.status){console.log(`[v0] Profile might already be stopped (404 at ${t})`),o={status:404,message:"Profile not found or already stopped"};continue}let r=await e.text();o={status:e.status,message:r}}catch(e){console.log(`[v0] Error trying endpoint ${t}:`,e.message),o=e}if(o?.status===404)return console.log("[v0] Profile appears to be already stopped, continuing..."),{success:!0,message:"Profile already stopped"};throw Error(`Failed to stop profile after trying all endpoints: ${JSON.stringify(o)}`)}async getProfileStatus(e){let o=await fetch(`${this.baseUrl}/browser/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to get profile status: ${e}`)}return o.json()}async getFolders(){try{let e=`${this.baseUrl}/folders`;console.log(`[v0] Fetching folders from ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`GoLogin API error (${o.status}): ${e}`)}let t=await o.json(),r=Array.isArray(t)?t:t.folders||[];return console.log(`[v0] ✓ Fetched ${r.length} folders from GoLogin`),r}catch(e){return console.error("[v0] Failed to fetch folders:",e.message),[]}}}let s=new r(process.env.GOLOGIN_API_KEY||"")},9692:(e,o,t)=>{t.d(o,{t:()=>l});var r=t(6766),s=t(1615);async function l(){let e=await (0,s.cookies)();return(0,r.createServerClient)("https://umhdnhckxgqywxgpybgo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtaGRuaGNreGdxeXd4Z3B5YmdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDA1NzYsImV4cCI6MjA3NDk3NjU3Nn0.sodO3ZUaTWDxBBZitsrc_j3SUmVWBNlAsQoDAdzs8mI",{cookies:{getAll:()=>e.getAll(),setAll(o){try{o.forEach(({name:o,value:t,options:r})=>e.set(o,t,r))}catch{}}}})}}};var o=require("../../../../webpack-runtime.js");o.C(e);var t=e=>o(o.s=e),r=o.X(0,[948,227,59],()=>t(5457));module.exports=r})();