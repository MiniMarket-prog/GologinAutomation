"use strict";(()=>{var e={};e.id=645,e.ids=[645],e.modules={5129:e=>{e.exports=require("gologin")},2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2615:e=>{e.exports=require("http")},8791:e=>{e.exports=require("https")},8621:e=>{e.exports=require("punycode")},6162:e=>{e.exports=require("stream")},7360:e=>{e.exports=require("url")},1568:e=>{e.exports=require("zlib")},7250:e=>{e.exports=import("puppeteer-core")},8384:(e,o,t)=>{t.a(e,async(e,r)=>{try{t.r(o),t.d(o,{originalPathname:()=>h,patchFetch:()=>c,requestAsyncStorage:()=>g,routeModule:()=>p,serverHooks:()=>d,staticGenerationAsyncStorage:()=>u});var s=t(9303),l=t(8716),n=t(670),i=t(7596),a=e([i]);i=(a.then?(await a)():a)[0];let p=new s.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/profiles/launch/route",pathname:"/api/profiles/launch",filename:"route",bundlePath:"app/api/profiles/launch/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\profiles\\launch\\route.ts",nextConfigOutput:"standalone",userland:i}),{requestAsyncStorage:g,staticGenerationAsyncStorage:u,serverHooks:d}=p,h="/api/profiles/launch/route";function c(){return(0,n.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:u})}r()}catch(e){r(e)}})},7596:(e,o,t)=>{t.a(e,async(e,r)=>{try{t.r(o),t.d(o,{POST:()=>a});var s=t(7070),l=t(9692),n=t(3541),i=e([n]);async function a(e){try{let{profileId:o}=await e.json();if(!o)return s.NextResponse.json({error:"Profile ID is required"},{status:400});let t=await (0,l.t)(),{data:r,error:i}=await t.from("gologin_profiles").select("*").eq("id",o).single();if(i||!r)return s.NextResponse.json({error:"Profile not found"},{status:404});console.log(`[v0] Launching profile ${r.profile_name} in local mode...`);let a=process.env.GOLOGIN_API_KEY;if(!a)return s.NextResponse.json({error:"GoLogin API key not configured"},{status:500});let c=new n.r(a,"local"),{browser:p,page:g}=await c.launchProfile(r.gologin_id);if(!p)return s.NextResponse.json({error:"Failed to launch browser"},{status:500});console.log("[v0] Opening Gmail in new tab...");let u=await p.newPage();return await u.goto("https://mail.google.com/mail/u/0/#inbox",{waitUntil:"networkidle2",timeout:3e4}),console.log(`[v0] ✓ Gmail opened successfully`),console.log(`[v0] ✓ Profile launched successfully`),console.log("[v0] Browser will stay open until manually closed"),s.NextResponse.json({success:!0,message:"Profile launched successfully. Browser will stay open until you close it manually.",profileName:r.profile_name})}catch(e){return console.error("[v0] Error launching profile:",e),s.NextResponse.json({error:e instanceof Error?e.message:"Failed to launch profile"},{status:500})}}n=(i.then?(await i)():i)[0],r()}catch(e){r(e)}})},3541:(e,o,t)=>{t.a(e,async(e,r)=>{try{t.d(o,{r:()=>i});var s=t(7250),l=t(3098),n=e([s]);s=(n.then?(await n)():n)[0];class i{constructor(e,o="cloud"){this.gologinInstance=null,this.gologinAPI=new l.X(e),this.apiKey=e,this.mode=o}async launchProfile(e){console.log("[v0] ========================================"),console.log(`[v0] Launching GoLogin profile: ${e}`),console.log(`[v0] Mode: ${this.mode.toUpperCase()}`),console.log("[v0] ========================================");try{let o;if("local"===this.mode){console.log("[v0] Step 1: Starting profile locally using GoLogin SDK...");try{let{GologinApi:r}=await Promise.resolve().then(t.t.bind(t,5129,23));this.gologinInstance=r({token:this.apiKey}),console.log("[v0] Launching local profile...");let{browser:s}=await this.gologinInstance.launch({profileId:e});o=s.wsEndpoint(),console.log(`[v0] ✓ Local profile launched`),console.log("[v0] Using LOCAL mode - connecting to local Orbita browser")}catch(e){throw console.error(`[v0] ❌ Failed to load GoLogin SDK for local mode`),console.error(`[v0] Error: ${e.message}`),console.error("[v0] Local mode requires running in a Node.js environment with GoLogin Desktop app installed"),Error("Local mode is not available in this environment. Please use Cloud mode or run the application locally with Node.js.")}}else console.log("[v0] Step 1: Starting profile via GoLogin API..."),await this.gologinAPI.startProfile(e),o=`wss://cloudbrowser.gologin.com/connect?token=${this.apiKey}&profile=${e}`,console.log("[v0] Using CLOUD mode - connecting to GoLogin cloud browser");console.log("[v0] Step 2: Connecting to WebSocket..."),console.log(`[v0] WebSocket URL: ${o.replace(this.apiKey,"***API_KEY***")}`);let r=await s.default.connect({browserWSEndpoint:o,defaultViewport:null,protocolTimeout:3e5});console.log(`[v0] ✓ Connected to browser`),console.log("[v0] Step 3: Getting browser page...");let l=await r.pages();console.log(`[v0] Found ${l.length} open pages`);let n=l[0]||await r.newPage();return console.log("[v0] ========================================"),console.log(`[v0] ✓✓✓ Profile ${e} launched successfully in ${this.mode.toUpperCase()} mode ✓✓✓`),console.log("[v0] ========================================"),{browser:r,page:n,success:!0}}catch(o){return console.error("[v0] ========================================"),console.error(`[v0] ❌ Failed to launch profile ${e}`),console.error(`[v0] Error type: ${o.name}`),console.error(`[v0] Error message: ${o.message}`),console.error("[v0] Error stack:",o.stack),console.error("[v0] ========================================"),{browser:null,page:null,success:!1,error:o.message}}}async closeProfile(e,o){console.log(`[v0] Closing profile: ${e}`);try{if(o&&(console.log("[v0] Closing browser..."),await o.close(),console.log(`[v0] ✓ Browser closed`)),"cloud"===this.mode){console.log("[v0] Stopping profile via GoLogin API...");let o=0,t=null;for(;o<3;)try{await this.gologinAPI.stopProfile(e),console.log(`[v0] ✓✓✓ Profile ${e} closed successfully ✓✓✓`);break}catch(e){o++,t=e,console.log(`[v0] Stop attempt ${o}/3 failed: ${e.message}`),o<3&&(console.log("[v0] Waiting 2 seconds before retry..."),await new Promise(e=>setTimeout(e,2e3)))}3===o&&(console.error(`[v0] ⚠️ Could not stop profile via API after 3 attempts`),console.error(`[v0] Last error: ${t?.message}`),console.log("[v0] Profile may need to be manually stopped in GoLogin dashboard"))}else console.log(`[v0] ✓ Profile closed`);return{success:!0}}catch(o){return console.error(`[v0] ❌ Failed to close profile ${e}`),console.error("[v0] Error:",o.message),{success:!1,error:o.message}}}}r()}catch(e){r(e)}})},3098:(e,o,t)=>{t.d(o,{U:()=>s,X:()=>r});class r{constructor(e){this.baseUrl="https://api.gologin.com",this.successfulEndpoint=null,this.apiKey=e}getEndpoint(){return this.successfulEndpoint}async getProfiles(){try{console.log("[v0] Fetching profiles using page-based pagination");let e=[],o=1,t=!0,r=null;for(;t;){let s=[`${this.baseUrl}/browser/v2?page=${o}`,`${this.baseUrl}/browser/v2?skip=${(o-1)*30}&limit=30`,`${this.baseUrl}/browser?page=${o}`],l=[],n=!1;for(let e of s)try{console.log(`[v0] Trying: ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok)continue;let t=await o.json();if(void 0!==t.allProfilesCount?r=t.allProfilesCount:void 0!==t.total&&(r=t.total),Array.isArray(t)?l=t:t.profiles&&Array.isArray(t.profiles)?l=t.profiles:t.data&&Array.isArray(t.data)&&(l=t.data),l.length>0){console.log(`[v0] ✓ Success with ${e} - got ${l.length} profiles`),n=!0;break}}catch(e){continue}if(!n||0===l.length){console.log(`[v0] No more profiles found at page ${o}`),t=!1;break}1===o&&null!==r&&console.log(`[v0] Total profiles reported: ${r}`),1===o&&l.length>0&&console.log("[v0] Sample profile structure:",JSON.stringify(l[0],null,2));let i=new Set(e.map(e=>e.id)),a=l.filter(e=>!i.has(e.id));if(console.log(`[v0] Page ${o}: ${l.length} profiles, ${a.length} new (${l.length-a.length} duplicates)`),0===a.length){console.log(`[v0] All profiles on page ${o} are duplicates - stopping`),t=!1;break}e.push(...a),o++,null!==r&&e.length>=r&&(console.log(`[v0] Reached total count of ${r}`),t=!1),o>20&&(console.log("[v0] Reached page limit of 20"),t=!1)}return console.log(`[v0] ✓ Fetched ${e.length} unique profiles`),this.successfulEndpoint=`${this.baseUrl}/browser/v2`,e}catch(e){throw console.error("[v0] Failed to fetch profiles:",e.message),Error(`Failed to fetch profiles from GoLogin. ${e.message}. Please check your API key at https://app.gologin.com/personalArea/TokenApi`)}}async startProfile(e){console.log(`[v0] Starting profile ${e} in cloud mode...`);let o=await fetch(`${this.baseUrl}/browser/${e}/web`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to start profile: ${e}`)}let t=await o.json();return console.log("[v0] Start profile response:",JSON.stringify(t,null,2)),t}async stopProfile(e){let o=null;for(let t of[`/browser/${e}/stop`,`/browser/v2/${e}/stop`,`/browser/${e}/web/stop`])try{console.log(`[v0] Trying to stop profile at: ${t}`);let e=await fetch(`${this.baseUrl}${t}`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(e.ok)return console.log(`[v0] ✓ Profile stopped successfully using endpoint: ${t}`),e.json();if(404===e.status){console.log(`[v0] Profile might already be stopped (404 at ${t})`),o={status:404,message:"Profile not found or already stopped"};continue}let r=await e.text();o={status:e.status,message:r}}catch(e){console.log(`[v0] Error trying endpoint ${t}:`,e.message),o=e}if(o?.status===404)return console.log("[v0] Profile appears to be already stopped, continuing..."),{success:!0,message:"Profile already stopped"};throw Error(`Failed to stop profile after trying all endpoints: ${JSON.stringify(o)}`)}async getProfileStatus(e){let o=await fetch(`${this.baseUrl}/browser/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to get profile status: ${e}`)}return o.json()}async getFolders(){try{let e=`${this.baseUrl}/folders`;console.log(`[v0] Fetching folders from ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`GoLogin API error (${o.status}): ${e}`)}let t=await o.json(),r=Array.isArray(t)?t:t.folders||[];return console.log(`[v0] ✓ Fetched ${r.length} folders from GoLogin`),r}catch(e){return console.error("[v0] Failed to fetch folders:",e.message),[]}}}let s=new r(process.env.GOLOGIN_API_KEY||"")},9692:(e,o,t)=>{t.d(o,{t:()=>l});var r=t(6766),s=t(1615);async function l(){let e=await (0,s.cookies)();return(0,r.createServerClient)("https://umhdnhckxgqywxgpybgo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtaGRuaGNreGdxeXd4Z3B5YmdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDA1NzYsImV4cCI6MjA3NDk3NjU3Nn0.sodO3ZUaTWDxBBZitsrc_j3SUmVWBNlAsQoDAdzs8mI",{cookies:{getAll:()=>e.getAll(),setAll(o){try{o.forEach(({name:o,value:t,options:r})=>e.set(o,t,r))}catch{}}}})}}};var o=require("../../../../webpack-runtime.js");o.C(e);var t=e=>o(o.s=e),r=o.X(0,[948,227,59],()=>t(8384));module.exports=r})();