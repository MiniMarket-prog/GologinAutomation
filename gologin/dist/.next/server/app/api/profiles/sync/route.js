"use strict";(()=>{var e={};e.id=9776,e.ids=[9776],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},68621:e=>{e.exports=require("punycode")},76162:e=>{e.exports=require("stream")},17360:e=>{e.exports=require("url")},71568:e=>{e.exports=require("zlib")},18095:(e,o,r)=>{r.r(o),r.d(o,{originalPathname:()=>y,patchFetch:()=>v,requestAsyncStorage:()=>f,routeModule:()=>u,serverHooks:()=>m,staticGenerationAsyncStorage:()=>h});var t={};r.r(t),r.d(t,{POST:()=>g});var s=r(49303),l=r(88716),i=r(60670),n=r(87070),a=r(19692),c=r(99064),d=r(46569),p=r(83098);async function g(){try{let e=await (0,a.t)(),{data:{user:o}}=await e.auth.getUser();if(!o)return n.NextResponse.json({error:"Unauthorized"},{status:401});let r=await (0,d.GJ)();if(console.log(`[v0] User ${o.email} is admin: ${r}`),!r)return n.NextResponse.json({error:"Unauthorized: Only administrators can sync profiles from GoLogin"},{status:403});let t=(0,c.S)();console.log(`[v0] Ensuring user record exists for ${o.email}`);let s=o.id,{data:l}=await t.from("users").select("id").eq("id",o.id).single();if(l)console.log("[v0] User record already exists");else{console.log("[v0] User not found by ID, attempting to create...");let{error:e}=await t.from("users").insert({id:o.id,email:o.email,role:r?"admin":"user"});if(e){if("23505"===e.code&&e.message.includes("email")){console.log("[v0] User exists with same email, fetching existing user...");let{data:e}=await t.from("users").select("id").eq("email",o.email||"").single();if(e)s=e.id,console.log(`[v0] Using existing user ID: ${s}`);else throw Error("Failed to find or create user record")}else throw console.error("[v0] Error creating user record:",e),Error(`Failed to create user record: ${e.message}`)}else console.log("[v0] User record created successfully")}console.log("[v0] Fetching profiles from GoLogin API...");let i=await p.U.getProfiles();console.log(`[v0] Found ${i.length} profiles from GoLogin`),console.log("[v0] Fetching folders from GoLogin API...");let g=await p.U.getFolders();console.log(`[v0] Found ${g.length} folders from GoLogin`);let u=new Map(g.map(e=>[e.id||e._id,e.name||"Uncategorized"]));console.log("[v0] Folder map:",Object.fromEntries(u));let f=i.map(e=>{let o=e.folders&&e.folders.length>0?e.folders[0]:"Uncategorized";return{profile_id:e.id,profile_name:e.name||`Profile ${e.id}`,folder_name:o,assigned_user_id:s,status:"idle",is_deleted:!1,deleted_at:null}});console.log(`[v0] Mapped ${f.length} profiles with folder names`);let h=f.reduce((e,o)=>{let r=o.folder_name;return e[r]=(e[r]||0)+1,e},{});console.log("[v0] Folder distribution:",h);let m=Array.from(new Map(f.map(e=>[e.profile_id,e])).values());if(console.log(`[v0] Deduplicating: ${f.length} → ${m.length} unique profiles`),0===m.length)return n.NextResponse.json({success:!0,message:"No profiles to sync",count:0});console.log(`[v0] Using ${r?"admin":"regular"} client for sync`);let{data:y,error:v}=await t.from("gologin_profiles").upsert(m,{onConflict:"profile_id",ignoreDuplicates:!1}).select();if(v)throw console.error("[v0] Error upserting profiles:",v),Error(`Failed to sync profiles: ${v.message}`);console.log(`[v0] Successfully synced ${y?.length||m.length} profiles`);let $=i.map(e=>e.id);console.log(`[v0] Checking for deleted profiles not in GoLogin list of ${$.length} IDs`);let{data:w}=await t.from("gologin_profiles").select("profile_id, profile_name").eq("is_deleted",!1),x=(w||[]).filter(e=>!$.includes(e.profile_id)),E=0;if(x.length>0){let e=x.map(e=>e.profile_id),{data:o,error:r}=await t.from("gologin_profiles").update({is_deleted:!0,deleted_at:new Date().toISOString(),status:"deleted"}).in("profile_id",e).select("profile_id, profile_name");r?console.error("[v0] Error marking deleted profiles:",r):(E=o?.length||0,console.log(`[v0] Marked ${E} profiles as deleted`),o&&o.length>0&&console.log("[v0] Deleted profiles:",o.map(e=>`${e.profile_name} (${e.profile_id})`).join(", ")))}else console.log("[v0] No deleted profiles found");return n.NextResponse.json({success:!0,message:`Successfully synced ${y?.length||m.length} profiles, marked ${E} as deleted`,synced:y?.length||m.length,deleted:E})}catch(o){console.error("[v0] Error syncing profiles:",o);let e=o instanceof Error?o.message:"Failed to sync profiles";return n.NextResponse.json({error:e},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/profiles/sync/route",pathname:"/api/profiles/sync",filename:"route",bundlePath:"app/api/profiles/sync/route"},resolvedPagePath:"D:\\appProject\\GologinAutomation\\gologin\\app\\api\\profiles\\sync\\route.ts",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:f,staticGenerationAsyncStorage:h,serverHooks:m}=u,y="/api/profiles/sync/route";function v(){return(0,i.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:h})}},83098:(e,o,r)=>{r.d(o,{U:()=>s,X:()=>t});class t{constructor(e){this.baseUrl="https://api.gologin.com",this.successfulEndpoint=null,this.apiKey=e}getEndpoint(){return this.successfulEndpoint}async getProfiles(){try{console.log("[v0] Fetching profiles using page-based pagination");let e=[],o=1,r=!0,t=null;for(;r;){let s=[`${this.baseUrl}/browser/v2?page=${o}`,`${this.baseUrl}/browser/v2?skip=${(o-1)*30}&limit=30`,`${this.baseUrl}/browser?page=${o}`],l=[],i=!1;for(let e of s)try{console.log(`[v0] Trying: ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok)continue;let r=await o.json();if(void 0!==r.allProfilesCount?t=r.allProfilesCount:void 0!==r.total&&(t=r.total),Array.isArray(r)?l=r:r.profiles&&Array.isArray(r.profiles)?l=r.profiles:r.data&&Array.isArray(r.data)&&(l=r.data),l.length>0){console.log(`[v0] ✓ Success with ${e} - got ${l.length} profiles`),i=!0;break}}catch(e){continue}if(!i||0===l.length){console.log(`[v0] No more profiles found at page ${o}`),r=!1;break}1===o&&null!==t&&console.log(`[v0] Total profiles reported: ${t}`),1===o&&l.length>0&&console.log("[v0] Sample profile structure:",JSON.stringify(l[0],null,2));let n=new Set(e.map(e=>e.id)),a=l.filter(e=>!n.has(e.id));if(console.log(`[v0] Page ${o}: ${l.length} profiles, ${a.length} new (${l.length-a.length} duplicates)`),0===a.length){console.log(`[v0] All profiles on page ${o} are duplicates - stopping`),r=!1;break}e.push(...a),o++,null!==t&&e.length>=t&&(console.log(`[v0] Reached total count of ${t}`),r=!1),o>20&&(console.log("[v0] Reached page limit of 20"),r=!1)}return console.log(`[v0] ✓ Fetched ${e.length} unique profiles`),this.successfulEndpoint=`${this.baseUrl}/browser/v2`,e}catch(e){throw console.error("[v0] Failed to fetch profiles:",e.message),Error(`Failed to fetch profiles from GoLogin. ${e.message}. Please check your API key at https://app.gologin.com/personalArea/TokenApi`)}}async startProfile(e){console.log(`[v0] Starting profile ${e} in cloud mode...`);let o=await fetch(`${this.baseUrl}/browser/${e}/web`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`Failed to start profile: ${e}`)}let r=await o.json();return console.log("[v0] Start profile response:",JSON.stringify(r,null,2)),r}async stopProfile(e){let o=null;for(let r of[`/browser/${e}/stop`,`/browser/v2/${e}/stop`,`/browser/${e}/web/stop`])try{console.log(`[v0] Trying to stop profile at: ${r}`);let e=await fetch(`${this.baseUrl}${r}`,{method:"POST",headers:{Authorization:`Bearer ${this.apiKey}`}});if(e.ok)return console.log(`[v0] ✓ Profile stopped successfully using endpoint: ${r}`),e.json();if(404===e.status){console.log(`[v0] Profile might already be stopped (404 at ${r})`),o={status:404,message:"Profile not found or already stopped"};continue}let t=await e.text();o={status:e.status,message:t}}catch(e){console.log(`[v0] Error trying endpoint ${r}:`,e.message),o=e}if(o?.status===404)return console.log("[v0] Profile appears to be already stopped, continuing..."),{success:!0,message:"Profile already stopped"};throw Error(`Failed to stop profile after trying all endpoints: ${JSON.stringify(o)}`)}async getProfileStatus(e){try{let o=await fetch(`${this.baseUrl}/browser/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text(),r=e;try{r=JSON.parse(e).message||e}catch{}throw Error(`${o.status}: ${r}`)}return o.json()}catch(e){if(e.message)throw e;throw Error(`Failed to get profile status: ${e}`)}}async getFolders(){try{let e=`${this.baseUrl}/folders`;console.log(`[v0] Fetching folders from ${e}`);let o=await fetch(e,{headers:{Authorization:`Bearer ${this.apiKey}`}});if(!o.ok){let e=await o.text();throw Error(`GoLogin API error (${o.status}): ${e}`)}let r=await o.json(),t=Array.isArray(r)?r:r.folders||[];return console.log(`[v0] ✓ Fetched ${t.length} folders from GoLogin`),t}catch(e){return console.error("[v0] Failed to fetch folders:",e.message),[]}}}let s=new t(process.env.GOLOGIN_API_KEY||"")},99064:(e,o,r)=>{r.d(o,{S:()=>l});var t=r(61657);let s=null;function l(){if(s)return s;if(!process.env.SUPABASE_SERVICE_ROLE_KEY)throw Error("SUPABASE_SERVICE_ROLE_KEY is not set");return s=(0,t.eI)("https://umhdnhckxgqywxgpybgo.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY,{auth:{autoRefreshToken:!1,persistSession:!1}})}},19692:(e,o,r)=>{r.d(o,{t:()=>l});var t=r(67721),s=r(71615);async function l(){let e=await (0,s.cookies)();return(0,t.createServerClient)("https://umhdnhckxgqywxgpybgo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtaGRuaGNreGdxeXd4Z3B5YmdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDA1NzYsImV4cCI6MjA3NDk3NjU3Nn0.sodO3ZUaTWDxBBZitsrc_j3SUmVWBNlAsQoDAdzs8mI",{cookies:{getAll:()=>e.getAll(),setAll(o){try{o.forEach(({name:o,value:r,options:t})=>e.set(o,r,t))}catch{}}}})}},46569:(e,o,r)=>{r.d(o,{GJ:()=>l,kF:()=>i});var t=r(19692);async function s(){let e=await (0,t.t)(),{data:{user:o}}=await e.auth.getUser();return o}async function l(){let e=await (0,t.t)(),o=await s();if(!o)return!1;console.log("[v0] Checking admin status for user:",o.email);let{data:r,error:l}=await e.from("users").select("role").eq("email",o.email).single();if(console.log("[v0] User data from database:",r),console.log("[v0] Query error:",l),l||!r)return console.log("[v0] No user data found or error occurred"),!1;let i="admin"===r.role;return console.log("[v0] Is admin:",i),i}async function i(){if(!await l())throw Error("Unauthorized: Admin access required")}}};var o=require("../../../../webpack-runtime.js");o.C(e);var r=e=>o(o.s=e),t=o.X(0,[8948,4526,9702,5972],()=>r(18095));module.exports=t})();