"use strict";(()=>{var e={};e.id=1220,e.ids=[1220],e.modules={5129:e=>{e.exports=require("gologin")},2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2615:e=>{e.exports=require("http")},8791:e=>{e.exports=require("https")},8621:e=>{e.exports=require("punycode")},6162:e=>{e.exports=require("stream")},7360:e=>{e.exports=require("url")},1568:e=>{e.exports=require("zlib")},7250:e=>{e.exports=import("puppeteer-core")},3052:(e,o,s)=>{s.a(e,async(e,t)=>{try{s.r(o),s.d(o,{originalPathname:()=>v,patchFetch:()=>c,requestAsyncStorage:()=>g,routeModule:()=>u,serverHooks:()=>d,staticGenerationAsyncStorage:()=>p});var r=s(9303),a=s(8716),n=s(670),i=s(1212),l=e([i]);i=(l.then?(await l)():l)[0];let u=new r.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/queue/process/route",pathname:"/api/queue/process",filename:"route",bundlePath:"app/api/queue/process/route"},resolvedPagePath:"C:\\Users\\HP\\Documents\\GitHub\\GologinAutomation\\gologin\\app\\api\\queue\\process\\route.ts",nextConfigOutput:"standalone",userland:i}),{requestAsyncStorage:g,staticGenerationAsyncStorage:p,serverHooks:d}=u,v="/api/queue/process/route";function c(){return(0,n.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:p})}t()}catch(e){t(e)}})},1212:(e,o,s)=>{s.a(e,async(e,t)=>{try{s.r(o),s.d(o,{POST:()=>l});var r=s(9692),a=s(3870),n=s(7070),i=e([a]);async function l(e){try{let e=await (0,r.t)(),{data:o,error:s}=await e.from("settings").select("value").eq("key","gologin_api_key").single();if(s||!o?.value)return n.NextResponse.json({error:"GoLogin API key not found. Please save it in Settings first."},{status:400});let t=new a.w(o.value);return await t.processPendingTasks(),n.NextResponse.json({success:!0,message:"Queue processed"})}catch(e){return console.error("[v0] Error processing queue:",e),n.NextResponse.json({error:e.message},{status:500})}}a=(i.then?(await i)():i)[0],t()}catch(e){t(e)}})},3870:(e,o,s)=>{s.a(e,async(e,t)=>{try{s.d(o,{w:()=>c});var r=s(9692),a=s(9064),n=s(1978),i=s(7957),l=e([n]);n=(l.then?(await l)():l)[0];class c{constructor(e){this.isProcessing=!1,this.gologinApiKey=e}async processPendingTasks(){if(this.isProcessing){console.log("[v0] Queue already processing, skipping");return}this.isProcessing=!0,console.log("[v0] ========================================"),console.log("[v0] Starting task queue processing"),console.log("[v0] ========================================");try{let e=await (0,r.t)();console.log("[v0] Fetching pending tasks...");let{data:o,error:s}=await e.from("automation_tasks").select("*").eq("status","pending").lte("scheduled_at",new Date().toISOString()).order("priority",{ascending:!1}).order("scheduled_at",{ascending:!0}).limit(10);if(s)throw console.error("[v0] ❌ Error fetching tasks:",s),s;if(!o||0===o.length){console.log("[v0] No pending tasks to process");return}console.log(`[v0] ✓ Found ${o.length} pending tasks`),o.forEach((e,o)=>{console.log(`[v0]   ${o+1}. ${e.task_type} (ID: ${e.id})`)}),console.log("[v0] Fetching behavior pattern...");let{data:t,error:a}=await e.from("behavior_patterns").select("*").eq("is_default",!0).single();if(a)throw console.error("[v0] ❌ Error fetching behavior pattern:",a),a;console.log("[v0] ✓ Behavior pattern loaded"),console.log("[v0] Fetching GoLogin mode setting...");let{data:n}=await e.from("settings").select("value").eq("key","gologin_mode").single(),l=n?.value||"cloud",c=(0,i.B)(l);for(let e of(console.log(`[v0] ✓ GoLogin mode: ${c}`),o))await this.processTask(e,t,c);console.log("[v0] ========================================"),console.log("[v0] ✓ Task queue processing completed"),console.log("[v0] ========================================")}catch(e){console.error("[v0] ========================================"),console.error("[v0] ❌ Error processing task queue"),console.error("[v0] Error:",e.message),console.error("[v0] ========================================")}finally{this.isProcessing=!1}}async processTask(e,o,s){console.log("[v0] ========================================"),console.log(`[v0] Processing task ${e.id}`),console.log(`[v0] Task type: ${e.task_type}`),console.log("[v0] ========================================");try{let t=await (0,r.t)();console.log(`[v0] Fetching profile ${e.profile_id}...`);let{data:i,error:l}=await t.from("gologin_profiles").select("*").eq("id",e.profile_id).single();if(l)throw console.error("[v0] ❌ Error fetching profile:",l),l;if(console.log(`[v0] ✓ Profile loaded: ${i.profile_name}`),"running"===i.status){console.log(`[v0] ⚠️ Profile ${i.profile_name} is already running, skipping task`);return}console.log("[v0] Updating task status to 'running'..."),await t.from("automation_tasks").update({status:"running",started_at:new Date().toISOString()}).eq("id",e.id),console.log("[v0] ✓ Task status updated"),console.log("[v0] Updating profile status to 'running'..."),await t.from("gologin_profiles").update({status:"running"}).eq("id",i.id),console.log("[v0] ✓ Profile status updated"),console.log("[v0] Executing task...");let c=new n.Z(this.gologinApiKey,s,o.config),u=await c.executeTask(e,i);if(console.log("[v0] Task execution result:",{success:u.success,duration:u.duration,error:u.error||"none"}),console.log("[v0] [DEBUG] Checking if task is check_gmail_status..."),console.log("[v0] [DEBUG] Task type:",e.task_type),console.log("[v0] [DEBUG] Result object:",JSON.stringify(u,null,2)),"check_gmail_status"===e.task_type&&u.result){console.log("[v0] [DEBUG] Gmail status check detected, preparing profile update..."),console.log("[v0] [DEBUG] Result.result:",JSON.stringify(u.result,null,2));let e=u.result.status,o=u.result.message;console.log("[v0] [DEBUG] Updating profile with Gmail status:",{gmail_status:e,gmail_status_checked_at:new Date().toISOString(),gmail_status_message:o});let s=(0,a.S)(),{data:t,error:r}=await s.from("gologin_profiles").update({gmail_status:e,gmail_status_checked_at:new Date().toISOString(),gmail_status_message:o}).eq("id",i.id).select();r?console.error("[v0] [DEBUG] ❌ Error updating Gmail status:",r):console.log("[v0] [DEBUG] ✓ Gmail status updated successfully:",t)}else console.log("[v0] [DEBUG] Not a Gmail status check task or no result data");console.log("[v0] Updating task final status..."),await t.from("automation_tasks").update({status:u.success?"completed":"failed",completed_at:new Date().toISOString(),error_message:u.error||null}).eq("id",e.id),console.log(`[v0] ✓ Task marked as ${u.success?"completed":"failed"}`),console.log("[v0] Updating profile final status..."),await t.from("gologin_profiles").update({status:u.success?"idle":"error",last_run:new Date().toISOString()}).eq("id",i.id),console.log(`[v0] ✓ Profile status updated to ${u.success?"idle":"error"}`),console.log("[v0] Creating activity log..."),await t.from("activity_logs").insert({profile_id:i.id,task_id:e.id,action:e.task_type,details:u.result||{},duration_ms:u.duration,success:u.success}),console.log("[v0] ✓ Activity logged"),console.log("[v0] ========================================"),console.log(`[v0] ${u.success?"✓✓✓":"❌"} Task ${e.id} ${u.success?"completed successfully":"failed"}`),!u.success&&u.error&&console.log(`[v0] Error: ${u.error}`),console.log("[v0] ========================================")}catch(s){console.error("[v0] ========================================"),console.error(`[v0] ❌ Error processing task ${e.id}`),console.error(`[v0] Error type: ${s.name}`),console.error(`[v0] Error message: ${s.message}`),console.error("[v0] Error stack:",s.stack),console.error("[v0] ========================================");let o=await (0,r.t)();await o.from("automation_tasks").update({status:"failed",completed_at:new Date().toISOString(),error_message:s.message}).eq("id",e.id),await o.from("gologin_profiles").update({status:"error"}).eq("id",e.profile_id)}}async scheduleRecurringTask(e,o,s,t){let a=await (0,r.t)(),{data:n}=await a.auth.getUser();if(!n.user)throw Error("Unauthorized");let{data:i,error:l}=await a.from("automation_tasks").insert({profile_id:e,task_type:o,config:t||{},scheduled_at:new Date().toISOString(),created_by:n.user.id}).select().single();if(l)throw l;return i}}t()}catch(e){t(e)}})},9064:(e,o,s)=>{s.d(o,{S:()=>a});var t=s(4738);let r=null;function a(){if(r)return r;if(!process.env.SUPABASE_SERVICE_ROLE_KEY)throw Error("SUPABASE_SERVICE_ROLE_KEY is not set");return r=(0,t.eI)("https://umhdnhckxgqywxgpybgo.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY,{auth:{autoRefreshToken:!1,persistSession:!1}})}},7957:(e,o,s)=>{s.d(o,{B:()=>t});function t(e){return"1"===process.env.VERCEL||process.env.VERCEL_ENV?(console.log("[v0] Running on Vercel - forcing cloud mode"),"cloud"):(console.log(`[v0] Running locally - using user preference: ${e}`),e)}}};var o=require("../../../../webpack-runtime.js");o.C(e);var s=e=>o(o.s=e),t=o.X(0,[8948,7462,5972,6338],()=>s(3052));module.exports=t})();